{
  "hooks": {
    "CSPT": {
      "attribute": [
        "set:HTMLScriptElement.prototype.src"
      ],
      "function": [
        "fetch",
        "XMLHttpRequest.prototype.open",
        "navigator.sendBeacon"
      ]
    }
  },
  "config": {
    "CSPT": {
      "match": [
        "exec:reg = /NOOOOOOOOP/; if (args instanceof Request) { url = args.url; method = method; } else if (target === 'fetch') { url = args[0]; method = args[1]?.method || 'GET'; } else if (target === 'XMLHttpRequest.prototype.open') { url = args[1]; method = args[0]; } else if (target === 'navigator.sendBeacon') { url = args[0]; method = 'POST'; } else if (target === 'HTMLScriptElement.prototype.src') { url = args; method = 'GET'; } else { return reg; }; if (typeof url !== 'string') { return reg; }; url = url.startsWith('http') ? url : `${location.origin}/${url.replace(/^(\\/)+/, '')}`; t_path = new URL(url).pathname.toLowerCase(); check = (p) => { p = p.toLowerCase(); if (p !== '' && p.length > 2 && !(domlogger.globals.CSPTBlacklist.includes(p)) && t_path.includes(p)) { return true; }; return false; }; words = []; words = words.concat(location.pathname.split('/')); words = words.concat(location.hash.slice(1).split('/')); words = words.concat([...(new URLSearchParams(location.hash.slice(1))).values()]); words = words.concat([...(new URLSearchParams(location.search)).values()]); words = [...new Set(words)]; found = []; for (const w of words) { if (check(w)) { found.push(w.toLowerCase()); } }; if (found.length > 0) { console.info(`[CSPT] ${target} || ${method} || ${url} || ${found.join(', ')}`); domlogger.utils.sendNotification(`${target}||${method}||${url}`, `New CSPT found!`, `${target} || ${method} || ${url} || ${found.join(', ')}`); }; return reg;"
      ],
      "alert": {
        "notification": true
      }
    }
  },
  "globals": {
    "CSPTBlacklist": [ "api" ]
  }
}